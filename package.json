{
  "name": "entrance-test-team",
  "version": "1.0.0",
  "description": "[![Review Assignment Due Date](https://classroom.github.com/assets/deadline-readme-button-22041afd0340ce965d47ae6ef1cefeee28c7c493a6346c4f15d667ab976d596c.svg)](https://classroom.github.com/a/vRH7PFQZ) # Входная работа для определения того, что вы помните (или не помните) после каникул ## Общее описание работы 1. Работа может выполняться как в команде (2-5 человек), так и индивидуально.     - Перед началом выполнения работы в README укажите состав команды или просто ваше имя. 2. Работа состоит из 2 заданий, каждое из которых имеет свои критерии оценки. 3. В оценке работы учитывается качество кода (выделение абстракций, функциональный подход, линтинг). 4. В оценке работы учитывается архитектура проекта и структура репозитория. 5. Интегрировать в работу верстку или нет - остается на ваш выбор. 6. Чем можно пользоваться? Чем угодно, кроме нейронок. 7. Плакать разрешается. ## Легенда Тайлер Дерден и Патрик Бэйтмен объездили всю страну. Потрясающий сервис туристических городов оставил после себя неизгладимое впечатление, абонемент к психологу и пару седых волос. Накопив некоторую сумму денег, новоиспечённые коллеги Тайлер и Патрик решили открыть свою сеть отелей, чтобы поднять с колен туристический сервис страны.   Таким образом, у них возникла потребность в создании эффективной системы управления отелями с правильно выстроенными бизнес-процессами, что позволит развивать свой бизнес и богатеть. ## Техническое задание ### Задание 1 1. Разработать структуру хранения информации об отелях.     - **Название отеля** — строка до 150 символов, хранит наименование отеля.     - **Регион** — ссылка на элемент другого файла, где хранится список всех регионов. 2. Разработать структуру номерного фонда каждого отеля.     -  Разработать структуру хранения информации о номерном фонде отеля (структура хранения подчинена справочнику «Отели»).     -  Основные характеристики номера:         - **Номер** — строка до 10 символов.         - **Категория** — одно из допустимых значений: Стандарт, Люкс, Апартаменты.         - **Количество мест** - определяется автоматически исходя из категории номера: Стандарт и Люкс до 2х мест, Апартаменты до 4х мест.         - **Статус** - одно из допустимых значений: свободен, занят. Значение по умолчанию - свободен. 3. Реализовать функцию изменения статуса номера.       Функция меняет статус номера на противоположный. 4. Реализовать функцию просмотра фонда свободных номеров.       Функция генерирует список номеров, отвечающих на вопрос: «Какие номера свободны на определенный промежуток дат?». 5. Тестирование.       Написать автоматический тест, проверяющий корректность функций изменения статуса и просмотра фонда.       Заполните минимальный набор данных:     - 2 отеля в различных регионах.     - В каждом отеле заполнить структуру номерного фонда — не менее 10 номеров. ### Задание 2 1. Создать структуру хранения информации о постояльцах отеля.     - **ФИО постояльца** - строка до 150 символов.     - **Контактный телефон** - строка до 12 символов. 2. Создать структуру храниения информации о плательщике.       В номера могут заселяться до 4-х человек, при этом плательщик может быть один — либо физическое лицо, либо юридическое лицо.     - **Плательщик** - строка до 150 символов.     - **Вид плательщика** - одно из допустимых значений: физическое лицо, юридическое лицо. 3. Реализовать функцию бронирования номера.       Функция создает запись о бронировании (учтите, что событие бронирования меняет статус номера).     - **Дата заказа** - тип данных Date().     - **Заказчик** - ссылка на элемент из файла о клиентах.     - **Постояльцы** - массив ссылок на элементы из файла о постояльцах.     - **Отель** - ссылка на элемент из файла о клиентах.     - **Бронируемый номер** - доступны для выбора только номера со статусом \"свободен\".     - **Дата заезда** - тип данных Date().     - **Дата выезда** - тип данных Date(). 4. Тестирование.       Написать автоматический тест, проверяющий корректность функций бронирования.       Заполните минимальный набор данных:       - Минимум 2 записи о бронировании. ## Критерии оценки: <table>     <tr>         <th>Критерий</th>         <th>Балл</th>         <th>Прибавка</th>         <th>Итоговый балл</th>     </tr>     <tr>     \t<td>Реализована структура \"Отели\"</td>     \t<td>1</td>     \t<td>Реализована функция добавления, удаления и изменения данных об отеле (+3)</td>     \t<td>4</td>     </tr>     <tr>     \t<td>Реализована структура \"Регионы\"</td>     \t<td>1</td>     \t<td></td>     \t<td>1</td>     </tr>     <tr>     \t<td>Протестировано ограничение на длину в названия отеля</td>     \t<td>1</td>     \t<td></td>     \t<td>1</td>     </tr>     <tr>     \t<td>Протестировано ограничение на длину в названии номера</td>     \t<td>1</td>     \t<td></td>     \t<td>1</td>     </tr>     <tr>     \t<td>Протестирование ограничение допустимых значений категории номера</td>     \t<td>1</td>     \t<td></td>     \t<td>1</td>     </tr>     <tr>     \t<td>Протестирована автоматическое установление количества мест в номере</td>     \t<td>1</td>     \t<td></td>     \t<td>1</td>     </tr>     <tr>     \t<td>Протестировано изменение статуса номера</td>     \t<td>1</td>     \t<td></td>     \t<td>1</td>     </tr>     <tr>     \t<td>Протестирована корректность вывода списка свободных номеров</td>     \t<td>3</td>     \t<td>Функция проводит агрегацию данных и выводит сводный список количества свободных номеров в каждой категории (+2)</td>     \t<td>5</td>     </tr>     <tr>     \t<td>Реализована структура \"Постояльцы\"</td>     \t<td>1</td>     \t<td>Реализована функция удаления и изменения данных о постояльце (+1). Структура автоматически пополняется при поступлении нового бронирования (+3)</td>     \t<td>5</td>     </tr>     <tr>     \t<td>Протестировано ограничение на длину в ФИО постояльца</td>     \t<td>1</td>     \t<td></td>     \t<td>1</td>     </tr>     <tr>     \t<td>Для номера телефона реализован шаблон \"+7ххх-ххх-хх-хх\"</td>     \t<td>2</td>     \t<td>Протестировано форматирование введенного телефона под шаблон (+2). Протестировано ограничение на длину номера телефона (+1)</td>     \t<td>5</td>     </tr>     <tr>     \t<td>Реализована и протестирована механика идентификации полных тезок среди постояльцев</td>     \t<td>5</td>     \t<td></td>     \t<td>5</td>     </tr>     <tr>     \t<td>Реализована структура \"Плательщики\"</td>     \t<td>1</td>     \t<td>Реализована функция удаления и изменения данных о плательщике (+1). Структура автоматически пополняется при поступлении нового бронирования (+3)</td>     \t<td>5</td>     </tr>     <tr>     \t<td>Протестировано ограничение на длину в наименовании плательщика</td>     \t<td>1</td>     \t<td></td>     \t<td>1</td>     </tr>     <tr>     \t<td>Протестирование ограничение допустимых значений вида плательщика</td>     \t<td>1</td>     \t<td></td>     \t<td>1</td>     </tr>     <tr>     \t<td>Протестирована функция создания бронирования</td>     \t<td>5</td>     \t<td>Функция автоматически меняет статус номера (+2). Функция осуществляет проверку допустимости значений дат заезда и выезда (+3)</td>     \t<td>10</td>     </tr>     <tr>     \t<td>Протестирован негативный сценарий проверки бронирования отеля со статусом \"занят\"</td>     \t<td>3</td>     \t<td>Функция выводит список свободных номеров в качестве альтернативы бронирования (+4)</td>     \t<td>7</td>     </tr>     <tr>         <td colspan=\"3\" align=\"right\">Итого</td>     \t<td>55</td>     </tr> </table>",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC"
}
